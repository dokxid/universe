
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ElevationRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ElevationRequest
 * 
 */
export type ElevationRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$ElevationRequestPayload>

export type AggregateElevationRequest = {
  _count: ElevationRequestCountAggregateOutputType | null
  _min: ElevationRequestMinAggregateOutputType | null
  _max: ElevationRequestMaxAggregateOutputType | null
}

export type ElevationRequestMinAggregateOutputType = {
  id: string | null
  storyId: string | null
  status: $Enums.ElevationRequestStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ElevationRequestMaxAggregateOutputType = {
  id: string | null
  storyId: string | null
  status: $Enums.ElevationRequestStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ElevationRequestCountAggregateOutputType = {
  id: number
  storyId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ElevationRequestMinAggregateInputType = {
  id?: true
  storyId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ElevationRequestMaxAggregateInputType = {
  id?: true
  storyId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ElevationRequestCountAggregateInputType = {
  id?: true
  storyId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ElevationRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ElevationRequest to aggregate.
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ElevationRequests to fetch.
   */
  orderBy?: Prisma.ElevationRequestOrderByWithRelationInput | Prisma.ElevationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ElevationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ElevationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ElevationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ElevationRequests
  **/
  _count?: true | ElevationRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ElevationRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ElevationRequestMaxAggregateInputType
}

export type GetElevationRequestAggregateType<T extends ElevationRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateElevationRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateElevationRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateElevationRequest[P]>
}




export type ElevationRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ElevationRequestWhereInput
  orderBy?: Prisma.ElevationRequestOrderByWithAggregationInput | Prisma.ElevationRequestOrderByWithAggregationInput[]
  by: Prisma.ElevationRequestScalarFieldEnum[] | Prisma.ElevationRequestScalarFieldEnum
  having?: Prisma.ElevationRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ElevationRequestCountAggregateInputType | true
  _min?: ElevationRequestMinAggregateInputType
  _max?: ElevationRequestMaxAggregateInputType
}

export type ElevationRequestGroupByOutputType = {
  id: string
  storyId: string | null
  status: $Enums.ElevationRequestStatus
  createdAt: Date
  updatedAt: Date
  _count: ElevationRequestCountAggregateOutputType | null
  _min: ElevationRequestMinAggregateOutputType | null
  _max: ElevationRequestMaxAggregateOutputType | null
}

type GetElevationRequestGroupByPayload<T extends ElevationRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ElevationRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ElevationRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ElevationRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ElevationRequestGroupByOutputType[P]>
      }
    >
  >



export type ElevationRequestWhereInput = {
  AND?: Prisma.ElevationRequestWhereInput | Prisma.ElevationRequestWhereInput[]
  OR?: Prisma.ElevationRequestWhereInput[]
  NOT?: Prisma.ElevationRequestWhereInput | Prisma.ElevationRequestWhereInput[]
  id?: Prisma.StringFilter<"ElevationRequest"> | string
  storyId?: Prisma.StringNullableFilter<"ElevationRequest"> | string | null
  status?: Prisma.EnumElevationRequestStatusFilter<"ElevationRequest"> | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
  story?: Prisma.XOR<Prisma.StoryNullableScalarRelationFilter, Prisma.StoryWhereInput> | null
}

export type ElevationRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  storyId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  story?: Prisma.StoryOrderByWithRelationInput
}

export type ElevationRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ElevationRequestWhereInput | Prisma.ElevationRequestWhereInput[]
  OR?: Prisma.ElevationRequestWhereInput[]
  NOT?: Prisma.ElevationRequestWhereInput | Prisma.ElevationRequestWhereInput[]
  storyId?: Prisma.StringNullableFilter<"ElevationRequest"> | string | null
  status?: Prisma.EnumElevationRequestStatusFilter<"ElevationRequest"> | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
  story?: Prisma.XOR<Prisma.StoryNullableScalarRelationFilter, Prisma.StoryWhereInput> | null
}, "id">

export type ElevationRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  storyId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ElevationRequestCountOrderByAggregateInput
  _max?: Prisma.ElevationRequestMaxOrderByAggregateInput
  _min?: Prisma.ElevationRequestMinOrderByAggregateInput
}

export type ElevationRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.ElevationRequestScalarWhereWithAggregatesInput | Prisma.ElevationRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.ElevationRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ElevationRequestScalarWhereWithAggregatesInput | Prisma.ElevationRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ElevationRequest"> | string
  storyId?: Prisma.StringNullableWithAggregatesFilter<"ElevationRequest"> | string | null
  status?: Prisma.EnumElevationRequestStatusWithAggregatesFilter<"ElevationRequest"> | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ElevationRequest"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ElevationRequest"> | Date | string
}

export type ElevationRequestCreateInput = {
  id?: string
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  story?: Prisma.StoryCreateNestedOneWithoutElevationRequestsInput
}

export type ElevationRequestUncheckedCreateInput = {
  id?: string
  storyId?: string | null
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ElevationRequestUpdateInput = {
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  story?: Prisma.StoryUpdateOneWithoutElevationRequestsNestedInput
}

export type ElevationRequestUncheckedUpdateInput = {
  storyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ElevationRequestCreateManyInput = {
  id?: string
  storyId?: string | null
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ElevationRequestUpdateManyMutationInput = {
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ElevationRequestUncheckedUpdateManyInput = {
  storyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ElevationRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  storyId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ElevationRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  storyId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ElevationRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  storyId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ElevationRequestListRelationFilter = {
  every?: Prisma.ElevationRequestWhereInput
  some?: Prisma.ElevationRequestWhereInput
  none?: Prisma.ElevationRequestWhereInput
}

export type ElevationRequestOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumElevationRequestStatusFieldUpdateOperationsInput = {
  set?: $Enums.ElevationRequestStatus
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
  unset?: boolean
}

export type ElevationRequestCreateNestedManyWithoutStoryInput = {
  create?: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput> | Prisma.ElevationRequestCreateWithoutStoryInput[] | Prisma.ElevationRequestUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.ElevationRequestCreateOrConnectWithoutStoryInput | Prisma.ElevationRequestCreateOrConnectWithoutStoryInput[]
  createMany?: Prisma.ElevationRequestCreateManyStoryInputEnvelope
  connect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
}

export type ElevationRequestUncheckedCreateNestedManyWithoutStoryInput = {
  create?: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput> | Prisma.ElevationRequestCreateWithoutStoryInput[] | Prisma.ElevationRequestUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.ElevationRequestCreateOrConnectWithoutStoryInput | Prisma.ElevationRequestCreateOrConnectWithoutStoryInput[]
  createMany?: Prisma.ElevationRequestCreateManyStoryInputEnvelope
  connect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
}

export type ElevationRequestUpdateManyWithoutStoryNestedInput = {
  create?: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput> | Prisma.ElevationRequestCreateWithoutStoryInput[] | Prisma.ElevationRequestUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.ElevationRequestCreateOrConnectWithoutStoryInput | Prisma.ElevationRequestCreateOrConnectWithoutStoryInput[]
  upsert?: Prisma.ElevationRequestUpsertWithWhereUniqueWithoutStoryInput | Prisma.ElevationRequestUpsertWithWhereUniqueWithoutStoryInput[]
  createMany?: Prisma.ElevationRequestCreateManyStoryInputEnvelope
  set?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  disconnect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  delete?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  connect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  update?: Prisma.ElevationRequestUpdateWithWhereUniqueWithoutStoryInput | Prisma.ElevationRequestUpdateWithWhereUniqueWithoutStoryInput[]
  updateMany?: Prisma.ElevationRequestUpdateManyWithWhereWithoutStoryInput | Prisma.ElevationRequestUpdateManyWithWhereWithoutStoryInput[]
  deleteMany?: Prisma.ElevationRequestScalarWhereInput | Prisma.ElevationRequestScalarWhereInput[]
}

export type ElevationRequestUncheckedUpdateManyWithoutStoryNestedInput = {
  create?: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput> | Prisma.ElevationRequestCreateWithoutStoryInput[] | Prisma.ElevationRequestUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.ElevationRequestCreateOrConnectWithoutStoryInput | Prisma.ElevationRequestCreateOrConnectWithoutStoryInput[]
  upsert?: Prisma.ElevationRequestUpsertWithWhereUniqueWithoutStoryInput | Prisma.ElevationRequestUpsertWithWhereUniqueWithoutStoryInput[]
  createMany?: Prisma.ElevationRequestCreateManyStoryInputEnvelope
  set?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  disconnect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  delete?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  connect?: Prisma.ElevationRequestWhereUniqueInput | Prisma.ElevationRequestWhereUniqueInput[]
  update?: Prisma.ElevationRequestUpdateWithWhereUniqueWithoutStoryInput | Prisma.ElevationRequestUpdateWithWhereUniqueWithoutStoryInput[]
  updateMany?: Prisma.ElevationRequestUpdateManyWithWhereWithoutStoryInput | Prisma.ElevationRequestUpdateManyWithWhereWithoutStoryInput[]
  deleteMany?: Prisma.ElevationRequestScalarWhereInput | Prisma.ElevationRequestScalarWhereInput[]
}

export type ElevationRequestCreateWithoutStoryInput = {
  id?: string
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ElevationRequestUncheckedCreateWithoutStoryInput = {
  id?: string
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ElevationRequestCreateOrConnectWithoutStoryInput = {
  where: Prisma.ElevationRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput>
}

export type ElevationRequestCreateManyStoryInputEnvelope = {
  data: Prisma.ElevationRequestCreateManyStoryInput | Prisma.ElevationRequestCreateManyStoryInput[]
}

export type ElevationRequestUpsertWithWhereUniqueWithoutStoryInput = {
  where: Prisma.ElevationRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.ElevationRequestUpdateWithoutStoryInput, Prisma.ElevationRequestUncheckedUpdateWithoutStoryInput>
  create: Prisma.XOR<Prisma.ElevationRequestCreateWithoutStoryInput, Prisma.ElevationRequestUncheckedCreateWithoutStoryInput>
}

export type ElevationRequestUpdateWithWhereUniqueWithoutStoryInput = {
  where: Prisma.ElevationRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.ElevationRequestUpdateWithoutStoryInput, Prisma.ElevationRequestUncheckedUpdateWithoutStoryInput>
}

export type ElevationRequestUpdateManyWithWhereWithoutStoryInput = {
  where: Prisma.ElevationRequestScalarWhereInput
  data: Prisma.XOR<Prisma.ElevationRequestUpdateManyMutationInput, Prisma.ElevationRequestUncheckedUpdateManyWithoutStoryInput>
}

export type ElevationRequestScalarWhereInput = {
  AND?: Prisma.ElevationRequestScalarWhereInput | Prisma.ElevationRequestScalarWhereInput[]
  OR?: Prisma.ElevationRequestScalarWhereInput[]
  NOT?: Prisma.ElevationRequestScalarWhereInput | Prisma.ElevationRequestScalarWhereInput[]
  id?: Prisma.StringFilter<"ElevationRequest"> | string
  storyId?: Prisma.StringNullableFilter<"ElevationRequest"> | string | null
  status?: Prisma.EnumElevationRequestStatusFilter<"ElevationRequest"> | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ElevationRequest"> | Date | string
}

export type ElevationRequestCreateManyStoryInput = {
  id?: string
  status: $Enums.ElevationRequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ElevationRequestUpdateWithoutStoryInput = {
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ElevationRequestUncheckedUpdateWithoutStoryInput = {
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ElevationRequestUncheckedUpdateManyWithoutStoryInput = {
  status?: Prisma.EnumElevationRequestStatusFieldUpdateOperationsInput | $Enums.ElevationRequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ElevationRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  storyId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  story?: boolean | Prisma.ElevationRequest$storyArgs<ExtArgs>
}, ExtArgs["result"]["elevationRequest"]>



export type ElevationRequestSelectScalar = {
  id?: boolean
  storyId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ElevationRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "storyId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["elevationRequest"]>
export type ElevationRequestInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  story?: boolean | Prisma.ElevationRequest$storyArgs<ExtArgs>
}

export type $ElevationRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ElevationRequest"
  objects: {
    story: Prisma.$StoryPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    storyId: string | null
    status: $Enums.ElevationRequestStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["elevationRequest"]>
  composites: {}
}

export type ElevationRequestGetPayload<S extends boolean | null | undefined | ElevationRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload, S>

export type ElevationRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ElevationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ElevationRequestCountAggregateInputType | true
  }

export interface ElevationRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ElevationRequest'], meta: { name: 'ElevationRequest' } }
  /**
   * Find zero or one ElevationRequest that matches the filter.
   * @param {ElevationRequestFindUniqueArgs} args - Arguments to find a ElevationRequest
   * @example
   * // Get one ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ElevationRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, ElevationRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ElevationRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ElevationRequestFindUniqueOrThrowArgs} args - Arguments to find a ElevationRequest
   * @example
   * // Get one ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ElevationRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ElevationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ElevationRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestFindFirstArgs} args - Arguments to find a ElevationRequest
   * @example
   * // Get one ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ElevationRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, ElevationRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ElevationRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestFindFirstOrThrowArgs} args - Arguments to find a ElevationRequest
   * @example
   * // Get one ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ElevationRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ElevationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ElevationRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ElevationRequests
   * const elevationRequests = await prisma.elevationRequest.findMany()
   * 
   * // Get first 10 ElevationRequests
   * const elevationRequests = await prisma.elevationRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const elevationRequestWithIdOnly = await prisma.elevationRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ElevationRequestFindManyArgs>(args?: Prisma.SelectSubset<T, ElevationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ElevationRequest.
   * @param {ElevationRequestCreateArgs} args - Arguments to create a ElevationRequest.
   * @example
   * // Create one ElevationRequest
   * const ElevationRequest = await prisma.elevationRequest.create({
   *   data: {
   *     // ... data to create a ElevationRequest
   *   }
   * })
   * 
   */
  create<T extends ElevationRequestCreateArgs>(args: Prisma.SelectSubset<T, ElevationRequestCreateArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ElevationRequests.
   * @param {ElevationRequestCreateManyArgs} args - Arguments to create many ElevationRequests.
   * @example
   * // Create many ElevationRequests
   * const elevationRequest = await prisma.elevationRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ElevationRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, ElevationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ElevationRequest.
   * @param {ElevationRequestDeleteArgs} args - Arguments to delete one ElevationRequest.
   * @example
   * // Delete one ElevationRequest
   * const ElevationRequest = await prisma.elevationRequest.delete({
   *   where: {
   *     // ... filter to delete one ElevationRequest
   *   }
   * })
   * 
   */
  delete<T extends ElevationRequestDeleteArgs>(args: Prisma.SelectSubset<T, ElevationRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ElevationRequest.
   * @param {ElevationRequestUpdateArgs} args - Arguments to update one ElevationRequest.
   * @example
   * // Update one ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ElevationRequestUpdateArgs>(args: Prisma.SelectSubset<T, ElevationRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ElevationRequests.
   * @param {ElevationRequestDeleteManyArgs} args - Arguments to filter ElevationRequests to delete.
   * @example
   * // Delete a few ElevationRequests
   * const { count } = await prisma.elevationRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ElevationRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, ElevationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ElevationRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ElevationRequests
   * const elevationRequest = await prisma.elevationRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ElevationRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, ElevationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ElevationRequest.
   * @param {ElevationRequestUpsertArgs} args - Arguments to update or create a ElevationRequest.
   * @example
   * // Update or create a ElevationRequest
   * const elevationRequest = await prisma.elevationRequest.upsert({
   *   create: {
   *     // ... data to create a ElevationRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ElevationRequest we want to update
   *   }
   * })
   */
  upsert<T extends ElevationRequestUpsertArgs>(args: Prisma.SelectSubset<T, ElevationRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__ElevationRequestClient<runtime.Types.Result.GetResult<Prisma.$ElevationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ElevationRequests that matches the filter.
   * @param {ElevationRequestFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const elevationRequest = await prisma.elevationRequest.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ElevationRequestFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a ElevationRequest.
   * @param {ElevationRequestAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const elevationRequest = await prisma.elevationRequest.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ElevationRequestAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of ElevationRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestCountArgs} args - Arguments to filter ElevationRequests to count.
   * @example
   * // Count the number of ElevationRequests
   * const count = await prisma.elevationRequest.count({
   *   where: {
   *     // ... the filter for the ElevationRequests we want to count
   *   }
   * })
  **/
  count<T extends ElevationRequestCountArgs>(
    args?: Prisma.Subset<T, ElevationRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ElevationRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ElevationRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ElevationRequestAggregateArgs>(args: Prisma.Subset<T, ElevationRequestAggregateArgs>): Prisma.PrismaPromise<GetElevationRequestAggregateType<T>>

  /**
   * Group by ElevationRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ElevationRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ElevationRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ElevationRequestGroupByArgs['orderBy'] }
      : { orderBy?: ElevationRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ElevationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetElevationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ElevationRequest model
 */
readonly fields: ElevationRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ElevationRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ElevationRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  story<T extends Prisma.ElevationRequest$storyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ElevationRequest$storyArgs<ExtArgs>>): Prisma.Prisma__StoryClient<runtime.Types.Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ElevationRequest model
 */
export interface ElevationRequestFieldRefs {
  readonly id: Prisma.FieldRef<"ElevationRequest", 'String'>
  readonly storyId: Prisma.FieldRef<"ElevationRequest", 'String'>
  readonly status: Prisma.FieldRef<"ElevationRequest", 'ElevationRequestStatus'>
  readonly createdAt: Prisma.FieldRef<"ElevationRequest", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ElevationRequest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ElevationRequest findUnique
 */
export type ElevationRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter, which ElevationRequest to fetch.
   */
  where: Prisma.ElevationRequestWhereUniqueInput
}

/**
 * ElevationRequest findUniqueOrThrow
 */
export type ElevationRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter, which ElevationRequest to fetch.
   */
  where: Prisma.ElevationRequestWhereUniqueInput
}

/**
 * ElevationRequest findFirst
 */
export type ElevationRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter, which ElevationRequest to fetch.
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ElevationRequests to fetch.
   */
  orderBy?: Prisma.ElevationRequestOrderByWithRelationInput | Prisma.ElevationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ElevationRequests.
   */
  cursor?: Prisma.ElevationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ElevationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ElevationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ElevationRequests.
   */
  distinct?: Prisma.ElevationRequestScalarFieldEnum | Prisma.ElevationRequestScalarFieldEnum[]
}

/**
 * ElevationRequest findFirstOrThrow
 */
export type ElevationRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter, which ElevationRequest to fetch.
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ElevationRequests to fetch.
   */
  orderBy?: Prisma.ElevationRequestOrderByWithRelationInput | Prisma.ElevationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ElevationRequests.
   */
  cursor?: Prisma.ElevationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ElevationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ElevationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ElevationRequests.
   */
  distinct?: Prisma.ElevationRequestScalarFieldEnum | Prisma.ElevationRequestScalarFieldEnum[]
}

/**
 * ElevationRequest findMany
 */
export type ElevationRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter, which ElevationRequests to fetch.
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ElevationRequests to fetch.
   */
  orderBy?: Prisma.ElevationRequestOrderByWithRelationInput | Prisma.ElevationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ElevationRequests.
   */
  cursor?: Prisma.ElevationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ElevationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ElevationRequests.
   */
  skip?: number
  distinct?: Prisma.ElevationRequestScalarFieldEnum | Prisma.ElevationRequestScalarFieldEnum[]
}

/**
 * ElevationRequest create
 */
export type ElevationRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * The data needed to create a ElevationRequest.
   */
  data: Prisma.XOR<Prisma.ElevationRequestCreateInput, Prisma.ElevationRequestUncheckedCreateInput>
}

/**
 * ElevationRequest createMany
 */
export type ElevationRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ElevationRequests.
   */
  data: Prisma.ElevationRequestCreateManyInput | Prisma.ElevationRequestCreateManyInput[]
}

/**
 * ElevationRequest update
 */
export type ElevationRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * The data needed to update a ElevationRequest.
   */
  data: Prisma.XOR<Prisma.ElevationRequestUpdateInput, Prisma.ElevationRequestUncheckedUpdateInput>
  /**
   * Choose, which ElevationRequest to update.
   */
  where: Prisma.ElevationRequestWhereUniqueInput
}

/**
 * ElevationRequest updateMany
 */
export type ElevationRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ElevationRequests.
   */
  data: Prisma.XOR<Prisma.ElevationRequestUpdateManyMutationInput, Prisma.ElevationRequestUncheckedUpdateManyInput>
  /**
   * Filter which ElevationRequests to update
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * Limit how many ElevationRequests to update.
   */
  limit?: number
}

/**
 * ElevationRequest upsert
 */
export type ElevationRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * The filter to search for the ElevationRequest to update in case it exists.
   */
  where: Prisma.ElevationRequestWhereUniqueInput
  /**
   * In case the ElevationRequest found by the `where` argument doesn't exist, create a new ElevationRequest with this data.
   */
  create: Prisma.XOR<Prisma.ElevationRequestCreateInput, Prisma.ElevationRequestUncheckedCreateInput>
  /**
   * In case the ElevationRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ElevationRequestUpdateInput, Prisma.ElevationRequestUncheckedUpdateInput>
}

/**
 * ElevationRequest delete
 */
export type ElevationRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
  /**
   * Filter which ElevationRequest to delete.
   */
  where: Prisma.ElevationRequestWhereUniqueInput
}

/**
 * ElevationRequest deleteMany
 */
export type ElevationRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ElevationRequests to delete
   */
  where?: Prisma.ElevationRequestWhereInput
  /**
   * Limit how many ElevationRequests to delete.
   */
  limit?: number
}

/**
 * ElevationRequest findRaw
 */
export type ElevationRequestFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ElevationRequest aggregateRaw
 */
export type ElevationRequestAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ElevationRequest.story
 */
export type ElevationRequest$storyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Story
   */
  select?: Prisma.StorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Story
   */
  omit?: Prisma.StoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoryInclude<ExtArgs> | null
  where?: Prisma.StoryWhereInput
}

/**
 * ElevationRequest without action
 */
export type ElevationRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ElevationRequest
   */
  select?: Prisma.ElevationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ElevationRequest
   */
  omit?: Prisma.ElevationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ElevationRequestInclude<ExtArgs> | null
}
