
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GeoJson` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GeoJson
 * 
 */
export type GeoJsonModel = runtime.Types.Result.DefaultSelection<Prisma.$GeoJsonPayload>






export type GeoJsonCompositeFilter =
| Prisma.PatchUndefined<
    Prisma.Either<Required<GeoJsonCompositeFilterBase>, Exclude<keyof Required<GeoJsonCompositeFilterBase>, 'path'>>,
    Required<GeoJsonCompositeFilterBase>
  >
| Prisma.OptionalFlat<Omit<Required<GeoJsonCompositeFilterBase>, 'path'>>

export type GeoJsonCompositeFilterBase = {
  equals?: Prisma.GeoJsonObjectEqualityInput
  is?: Prisma.GeoJsonWhereInput
  isNot?: Prisma.GeoJsonWhereInput
}

export type GeoJsonOrderByInput = {
  type?: Prisma.SortOrder
  coordinates?: Prisma.SortOrder
}

export type GeoJsonCreateEnvelopeInput = {
  set?: Prisma.GeoJsonCreateInput
}

export type GeoJsonUpdateEnvelopeInput = {
  set?: Prisma.GeoJsonCreateInput
  update?: Prisma.GeoJsonUpdateInput
}

export type GeoJsonWhereInput = {
  AND?: Prisma.GeoJsonWhereInput | Prisma.GeoJsonWhereInput[]
  OR?: Prisma.GeoJsonWhereInput[]
  NOT?: Prisma.GeoJsonWhereInput | Prisma.GeoJsonWhereInput[]
  type?: Prisma.EnumGeoTypeFilter<"GeoJson"> | $Enums.GeoType
  coordinates?: Prisma.FloatNullableListFilter<"GeoJson">
}

export type GeoJsonCreatecoordinatesInput = {
  set: number[]
}

export type GeoJsonUpdateInput = {
  type?: Prisma.EnumGeoTypeFieldUpdateOperationsInput | $Enums.GeoType
  coordinates?: Prisma.GeoJsonUpdatecoordinatesInput | number[]
}

export type FloatNullableListFilter<$PrismaModel = never> = {
  equals?: number[] | Prisma.ListFloatFieldRefInput<$PrismaModel> | null
  has?: number | Prisma.FloatFieldRefInput<$PrismaModel> | null
  hasEvery?: number[] | Prisma.ListFloatFieldRefInput<$PrismaModel>
  hasSome?: number[] | Prisma.ListFloatFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type EnumGeoTypeFieldUpdateOperationsInput = {
  set?: $Enums.GeoType
}

export type GeoJsonUpdatecoordinatesInput = {
  set?: number[]
  push?: number | number[]
}



export type GeoJsonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  coordinates?: boolean
}, ExtArgs["result"]["geoJson"]>



export type GeoJsonSelectScalar = {
  type?: boolean
  coordinates?: boolean
}

export type GeoJsonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"type" | "coordinates", ExtArgs["result"]["geoJson"]>

export type $GeoJsonPayload = {
  name: "GeoJson"
  objects: {}
  scalars: {
    type: $Enums.GeoType
    coordinates: number[]
  }
  composites: {}
}

export type GeoJsonGetPayload<S extends boolean | null | undefined | GeoJsonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GeoJsonPayload, S>





/**
 * Fields of the GeoJson model
 */
export interface GeoJsonFieldRefs {
  readonly type: Prisma.FieldRef<"GeoJson", 'GeoType'>
  readonly coordinates: Prisma.FieldRef<"GeoJson", 'Float[]'>
}
    

// Custom InputTypes
/**
 * GeoJson without action
 */
export type GeoJsonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GeoJson
   */
  select?: Prisma.GeoJsonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GeoJson
   */
  omit?: Prisma.GeoJsonOmit<ExtArgs> | null
}
