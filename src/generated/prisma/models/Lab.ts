
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Lab` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Lab
 * 
 */
export type LabModel = runtime.Types.Result.DefaultSelection<Prisma.$LabPayload>

export type AggregateLab = {
  _count: LabCountAggregateOutputType | null
  _avg: LabAvgAggregateOutputType | null
  _sum: LabSumAggregateOutputType | null
  _min: LabMinAggregateOutputType | null
  _max: LabMaxAggregateOutputType | null
}

export type LabAvgAggregateOutputType = {
  lngCenter: number | null
  latCenter: number | null
  initialZoom: number | null
}

export type LabSumAggregateOutputType = {
  lngCenter: number | null
  latCenter: number | null
  initialZoom: number | null
}

export type LabMinAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  logo: string | null
  createdAt: Date | null
  metadata: string | null
  lngCenter: number | null
  latCenter: number | null
  initialZoom: number | null
  subtitle: string | null
  content: string | null
  visibility: $Enums.LabVisibility | null
}

export type LabMaxAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  logo: string | null
  createdAt: Date | null
  metadata: string | null
  lngCenter: number | null
  latCenter: number | null
  initialZoom: number | null
  subtitle: string | null
  content: string | null
  visibility: $Enums.LabVisibility | null
}

export type LabCountAggregateOutputType = {
  id: number
  name: number
  slug: number
  logo: number
  createdAt: number
  metadata: number
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: number
  content: number
  visibility: number
  _all: number
}


export type LabAvgAggregateInputType = {
  lngCenter?: true
  latCenter?: true
  initialZoom?: true
}

export type LabSumAggregateInputType = {
  lngCenter?: true
  latCenter?: true
  initialZoom?: true
}

export type LabMinAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  logo?: true
  createdAt?: true
  metadata?: true
  lngCenter?: true
  latCenter?: true
  initialZoom?: true
  subtitle?: true
  content?: true
  visibility?: true
}

export type LabMaxAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  logo?: true
  createdAt?: true
  metadata?: true
  lngCenter?: true
  latCenter?: true
  initialZoom?: true
  subtitle?: true
  content?: true
  visibility?: true
}

export type LabCountAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  logo?: true
  createdAt?: true
  metadata?: true
  lngCenter?: true
  latCenter?: true
  initialZoom?: true
  subtitle?: true
  content?: true
  visibility?: true
  _all?: true
}

export type LabAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lab to aggregate.
   */
  where?: Prisma.LabWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Labs to fetch.
   */
  orderBy?: Prisma.LabOrderByWithRelationInput | Prisma.LabOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LabWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Labs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Labs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Labs
  **/
  _count?: true | LabCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LabAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LabSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LabMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LabMaxAggregateInputType
}

export type GetLabAggregateType<T extends LabAggregateArgs> = {
      [P in keyof T & keyof AggregateLab]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLab[P]>
    : Prisma.GetScalarType<T[P], AggregateLab[P]>
}




export type LabGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LabWhereInput
  orderBy?: Prisma.LabOrderByWithAggregationInput | Prisma.LabOrderByWithAggregationInput[]
  by: Prisma.LabScalarFieldEnum[] | Prisma.LabScalarFieldEnum
  having?: Prisma.LabScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LabCountAggregateInputType | true
  _avg?: LabAvgAggregateInputType
  _sum?: LabSumAggregateInputType
  _min?: LabMinAggregateInputType
  _max?: LabMaxAggregateInputType
}

export type LabGroupByOutputType = {
  id: string
  name: string
  slug: string
  logo: string | null
  createdAt: Date
  metadata: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  _count: LabCountAggregateOutputType | null
  _avg: LabAvgAggregateOutputType | null
  _sum: LabSumAggregateOutputType | null
  _min: LabMinAggregateOutputType | null
  _max: LabMaxAggregateOutputType | null
}

type GetLabGroupByPayload<T extends LabGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LabGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LabGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LabGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LabGroupByOutputType[P]>
      }
    >
  >



export type LabWhereInput = {
  AND?: Prisma.LabWhereInput | Prisma.LabWhereInput[]
  OR?: Prisma.LabWhereInput[]
  NOT?: Prisma.LabWhereInput | Prisma.LabWhereInput[]
  id?: Prisma.StringFilter<"Lab"> | string
  name?: Prisma.StringFilter<"Lab"> | string
  slug?: Prisma.StringFilter<"Lab"> | string
  logo?: Prisma.StringNullableFilter<"Lab"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Lab"> | Date | string
  metadata?: Prisma.StringNullableFilter<"Lab"> | string | null
  lngCenter?: Prisma.FloatFilter<"Lab"> | number
  latCenter?: Prisma.FloatFilter<"Lab"> | number
  initialZoom?: Prisma.IntFilter<"Lab"> | number
  subtitle?: Prisma.StringFilter<"Lab"> | string
  content?: Prisma.StringFilter<"Lab"> | string
  visibility?: Prisma.EnumLabVisibilityFilter<"Lab"> | $Enums.LabVisibility
  stories?: Prisma.StoryListRelationFilter
  members?: Prisma.MemberListRelationFilter
  invitations?: Prisma.InvitationListRelationFilter
}

export type LabOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  content?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
  stories?: Prisma.StoryOrderByRelationAggregateInput
  members?: Prisma.MemberOrderByRelationAggregateInput
  invitations?: Prisma.InvitationOrderByRelationAggregateInput
}

export type LabWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.LabWhereInput | Prisma.LabWhereInput[]
  OR?: Prisma.LabWhereInput[]
  NOT?: Prisma.LabWhereInput | Prisma.LabWhereInput[]
  name?: Prisma.StringFilter<"Lab"> | string
  logo?: Prisma.StringNullableFilter<"Lab"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Lab"> | Date | string
  metadata?: Prisma.StringNullableFilter<"Lab"> | string | null
  lngCenter?: Prisma.FloatFilter<"Lab"> | number
  latCenter?: Prisma.FloatFilter<"Lab"> | number
  initialZoom?: Prisma.IntFilter<"Lab"> | number
  subtitle?: Prisma.StringFilter<"Lab"> | string
  content?: Prisma.StringFilter<"Lab"> | string
  visibility?: Prisma.EnumLabVisibilityFilter<"Lab"> | $Enums.LabVisibility
  stories?: Prisma.StoryListRelationFilter
  members?: Prisma.MemberListRelationFilter
  invitations?: Prisma.InvitationListRelationFilter
}, "id" | "slug">

export type LabOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  content?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
  _count?: Prisma.LabCountOrderByAggregateInput
  _avg?: Prisma.LabAvgOrderByAggregateInput
  _max?: Prisma.LabMaxOrderByAggregateInput
  _min?: Prisma.LabMinOrderByAggregateInput
  _sum?: Prisma.LabSumOrderByAggregateInput
}

export type LabScalarWhereWithAggregatesInput = {
  AND?: Prisma.LabScalarWhereWithAggregatesInput | Prisma.LabScalarWhereWithAggregatesInput[]
  OR?: Prisma.LabScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LabScalarWhereWithAggregatesInput | Prisma.LabScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Lab"> | string
  name?: Prisma.StringWithAggregatesFilter<"Lab"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Lab"> | string
  logo?: Prisma.StringNullableWithAggregatesFilter<"Lab"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Lab"> | Date | string
  metadata?: Prisma.StringNullableWithAggregatesFilter<"Lab"> | string | null
  lngCenter?: Prisma.FloatWithAggregatesFilter<"Lab"> | number
  latCenter?: Prisma.FloatWithAggregatesFilter<"Lab"> | number
  initialZoom?: Prisma.IntWithAggregatesFilter<"Lab"> | number
  subtitle?: Prisma.StringWithAggregatesFilter<"Lab"> | string
  content?: Prisma.StringWithAggregatesFilter<"Lab"> | string
  visibility?: Prisma.EnumLabVisibilityWithAggregatesFilter<"Lab"> | $Enums.LabVisibility
}

export type LabCreateInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryCreateNestedManyWithoutLabInput
  members?: Prisma.MemberCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationCreateNestedManyWithoutLabInput
}

export type LabUncheckedCreateInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedCreateNestedManyWithoutLabInput
  members?: Prisma.MemberUncheckedCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationUncheckedCreateNestedManyWithoutLabInput
}

export type LabUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUpdateManyWithoutLabNestedInput
  members?: Prisma.MemberUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUpdateManyWithoutLabNestedInput
}

export type LabUncheckedUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedUpdateManyWithoutLabNestedInput
  members?: Prisma.MemberUncheckedUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUncheckedUpdateManyWithoutLabNestedInput
}

export type LabCreateManyInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
}

export type LabUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
}

export type LabUncheckedUpdateManyInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
}

export type LabScalarRelationFilter = {
  is?: Prisma.LabWhereInput
  isNot?: Prisma.LabWhereInput
}

export type LabCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  content?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type LabAvgOrderByAggregateInput = {
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
}

export type LabMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  content?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type LabMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  content?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type LabSumOrderByAggregateInput = {
  lngCenter?: Prisma.SortOrder
  latCenter?: Prisma.SortOrder
  initialZoom?: Prisma.SortOrder
}

export type LabCreateNestedOneWithoutStoriesInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutStoriesInput, Prisma.LabUncheckedCreateWithoutStoriesInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutStoriesInput
  connect?: Prisma.LabWhereUniqueInput
}

export type LabUpdateOneRequiredWithoutStoriesNestedInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutStoriesInput, Prisma.LabUncheckedCreateWithoutStoriesInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutStoriesInput
  upsert?: Prisma.LabUpsertWithoutStoriesInput
  connect?: Prisma.LabWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LabUpdateToOneWithWhereWithoutStoriesInput, Prisma.LabUpdateWithoutStoriesInput>, Prisma.LabUncheckedUpdateWithoutStoriesInput>
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumLabVisibilityFieldUpdateOperationsInput = {
  set?: $Enums.LabVisibility
}

export type LabCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutMembersInput, Prisma.LabUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutMembersInput
  connect?: Prisma.LabWhereUniqueInput
}

export type LabUpdateOneRequiredWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutMembersInput, Prisma.LabUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutMembersInput
  upsert?: Prisma.LabUpsertWithoutMembersInput
  connect?: Prisma.LabWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LabUpdateToOneWithWhereWithoutMembersInput, Prisma.LabUpdateWithoutMembersInput>, Prisma.LabUncheckedUpdateWithoutMembersInput>
}

export type LabCreateNestedOneWithoutInvitationsInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutInvitationsInput, Prisma.LabUncheckedCreateWithoutInvitationsInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutInvitationsInput
  connect?: Prisma.LabWhereUniqueInput
}

export type LabUpdateOneRequiredWithoutInvitationsNestedInput = {
  create?: Prisma.XOR<Prisma.LabCreateWithoutInvitationsInput, Prisma.LabUncheckedCreateWithoutInvitationsInput>
  connectOrCreate?: Prisma.LabCreateOrConnectWithoutInvitationsInput
  upsert?: Prisma.LabUpsertWithoutInvitationsInput
  connect?: Prisma.LabWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LabUpdateToOneWithWhereWithoutInvitationsInput, Prisma.LabUpdateWithoutInvitationsInput>, Prisma.LabUncheckedUpdateWithoutInvitationsInput>
}

export type LabCreateWithoutStoriesInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  members?: Prisma.MemberCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationCreateNestedManyWithoutLabInput
}

export type LabUncheckedCreateWithoutStoriesInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  members?: Prisma.MemberUncheckedCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationUncheckedCreateNestedManyWithoutLabInput
}

export type LabCreateOrConnectWithoutStoriesInput = {
  where: Prisma.LabWhereUniqueInput
  create: Prisma.XOR<Prisma.LabCreateWithoutStoriesInput, Prisma.LabUncheckedCreateWithoutStoriesInput>
}

export type LabUpsertWithoutStoriesInput = {
  update: Prisma.XOR<Prisma.LabUpdateWithoutStoriesInput, Prisma.LabUncheckedUpdateWithoutStoriesInput>
  create: Prisma.XOR<Prisma.LabCreateWithoutStoriesInput, Prisma.LabUncheckedCreateWithoutStoriesInput>
  where?: Prisma.LabWhereInput
}

export type LabUpdateToOneWithWhereWithoutStoriesInput = {
  where?: Prisma.LabWhereInput
  data: Prisma.XOR<Prisma.LabUpdateWithoutStoriesInput, Prisma.LabUncheckedUpdateWithoutStoriesInput>
}

export type LabUpdateWithoutStoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  members?: Prisma.MemberUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUpdateManyWithoutLabNestedInput
}

export type LabUncheckedUpdateWithoutStoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  members?: Prisma.MemberUncheckedUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUncheckedUpdateManyWithoutLabNestedInput
}

export type LabCreateWithoutMembersInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationCreateNestedManyWithoutLabInput
}

export type LabUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedCreateNestedManyWithoutLabInput
  invitations?: Prisma.InvitationUncheckedCreateNestedManyWithoutLabInput
}

export type LabCreateOrConnectWithoutMembersInput = {
  where: Prisma.LabWhereUniqueInput
  create: Prisma.XOR<Prisma.LabCreateWithoutMembersInput, Prisma.LabUncheckedCreateWithoutMembersInput>
}

export type LabUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.LabUpdateWithoutMembersInput, Prisma.LabUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.LabCreateWithoutMembersInput, Prisma.LabUncheckedCreateWithoutMembersInput>
  where?: Prisma.LabWhereInput
}

export type LabUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.LabWhereInput
  data: Prisma.XOR<Prisma.LabUpdateWithoutMembersInput, Prisma.LabUncheckedUpdateWithoutMembersInput>
}

export type LabUpdateWithoutMembersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUpdateManyWithoutLabNestedInput
}

export type LabUncheckedUpdateWithoutMembersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedUpdateManyWithoutLabNestedInput
  invitations?: Prisma.InvitationUncheckedUpdateManyWithoutLabNestedInput
}

export type LabCreateWithoutInvitationsInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryCreateNestedManyWithoutLabInput
  members?: Prisma.MemberCreateNestedManyWithoutLabInput
}

export type LabUncheckedCreateWithoutInvitationsInput = {
  id?: string
  name: string
  slug: string
  logo?: string | null
  createdAt?: Date | string
  metadata?: string | null
  lngCenter: number
  latCenter: number
  initialZoom: number
  subtitle: string
  content: string
  visibility: $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedCreateNestedManyWithoutLabInput
  members?: Prisma.MemberUncheckedCreateNestedManyWithoutLabInput
}

export type LabCreateOrConnectWithoutInvitationsInput = {
  where: Prisma.LabWhereUniqueInput
  create: Prisma.XOR<Prisma.LabCreateWithoutInvitationsInput, Prisma.LabUncheckedCreateWithoutInvitationsInput>
}

export type LabUpsertWithoutInvitationsInput = {
  update: Prisma.XOR<Prisma.LabUpdateWithoutInvitationsInput, Prisma.LabUncheckedUpdateWithoutInvitationsInput>
  create: Prisma.XOR<Prisma.LabCreateWithoutInvitationsInput, Prisma.LabUncheckedCreateWithoutInvitationsInput>
  where?: Prisma.LabWhereInput
}

export type LabUpdateToOneWithWhereWithoutInvitationsInput = {
  where?: Prisma.LabWhereInput
  data: Prisma.XOR<Prisma.LabUpdateWithoutInvitationsInput, Prisma.LabUncheckedUpdateWithoutInvitationsInput>
}

export type LabUpdateWithoutInvitationsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUpdateManyWithoutLabNestedInput
  members?: Prisma.MemberUpdateManyWithoutLabNestedInput
}

export type LabUncheckedUpdateWithoutInvitationsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lngCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  latCenter?: Prisma.FloatFieldUpdateOperationsInput | number
  initialZoom?: Prisma.IntFieldUpdateOperationsInput | number
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  visibility?: Prisma.EnumLabVisibilityFieldUpdateOperationsInput | $Enums.LabVisibility
  stories?: Prisma.StoryUncheckedUpdateManyWithoutLabNestedInput
  members?: Prisma.MemberUncheckedUpdateManyWithoutLabNestedInput
}


/**
 * Count Type LabCountOutputType
 */

export type LabCountOutputType = {
  stories: number
  members: number
  invitations: number
}

export type LabCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stories?: boolean | LabCountOutputTypeCountStoriesArgs
  members?: boolean | LabCountOutputTypeCountMembersArgs
  invitations?: boolean | LabCountOutputTypeCountInvitationsArgs
}

/**
 * LabCountOutputType without action
 */
export type LabCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LabCountOutputType
   */
  select?: Prisma.LabCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LabCountOutputType without action
 */
export type LabCountOutputTypeCountStoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StoryWhereInput
}

/**
 * LabCountOutputType without action
 */
export type LabCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemberWhereInput
}

/**
 * LabCountOutputType without action
 */
export type LabCountOutputTypeCountInvitationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvitationWhereInput
}


export type LabSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  logo?: boolean
  createdAt?: boolean
  metadata?: boolean
  lngCenter?: boolean
  latCenter?: boolean
  initialZoom?: boolean
  subtitle?: boolean
  content?: boolean
  visibility?: boolean
  stories?: boolean | Prisma.Lab$storiesArgs<ExtArgs>
  members?: boolean | Prisma.Lab$membersArgs<ExtArgs>
  invitations?: boolean | Prisma.Lab$invitationsArgs<ExtArgs>
  _count?: boolean | Prisma.LabCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lab"]>



export type LabSelectScalar = {
  id?: boolean
  name?: boolean
  slug?: boolean
  logo?: boolean
  createdAt?: boolean
  metadata?: boolean
  lngCenter?: boolean
  latCenter?: boolean
  initialZoom?: boolean
  subtitle?: boolean
  content?: boolean
  visibility?: boolean
}

export type LabOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "slug" | "logo" | "createdAt" | "metadata" | "lngCenter" | "latCenter" | "initialZoom" | "subtitle" | "content" | "visibility", ExtArgs["result"]["lab"]>
export type LabInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stories?: boolean | Prisma.Lab$storiesArgs<ExtArgs>
  members?: boolean | Prisma.Lab$membersArgs<ExtArgs>
  invitations?: boolean | Prisma.Lab$invitationsArgs<ExtArgs>
  _count?: boolean | Prisma.LabCountOutputTypeDefaultArgs<ExtArgs>
}

export type $LabPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Lab"
  objects: {
    stories: Prisma.$StoryPayload<ExtArgs>[]
    members: Prisma.$MemberPayload<ExtArgs>[]
    invitations: Prisma.$InvitationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    slug: string
    logo: string | null
    createdAt: Date
    metadata: string | null
    lngCenter: number
    latCenter: number
    initialZoom: number
    subtitle: string
    content: string
    visibility: $Enums.LabVisibility
  }, ExtArgs["result"]["lab"]>
  composites: {}
}

export type LabGetPayload<S extends boolean | null | undefined | LabDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LabPayload, S>

export type LabCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LabCountAggregateInputType | true
  }

export interface LabDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lab'], meta: { name: 'Lab' } }
  /**
   * Find zero or one Lab that matches the filter.
   * @param {LabFindUniqueArgs} args - Arguments to find a Lab
   * @example
   * // Get one Lab
   * const lab = await prisma.lab.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LabFindUniqueArgs>(args: Prisma.SelectSubset<T, LabFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Lab that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LabFindUniqueOrThrowArgs} args - Arguments to find a Lab
   * @example
   * // Get one Lab
   * const lab = await prisma.lab.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LabFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LabFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lab that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabFindFirstArgs} args - Arguments to find a Lab
   * @example
   * // Get one Lab
   * const lab = await prisma.lab.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LabFindFirstArgs>(args?: Prisma.SelectSubset<T, LabFindFirstArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lab that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabFindFirstOrThrowArgs} args - Arguments to find a Lab
   * @example
   * // Get one Lab
   * const lab = await prisma.lab.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LabFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LabFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Labs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Labs
   * const labs = await prisma.lab.findMany()
   * 
   * // Get first 10 Labs
   * const labs = await prisma.lab.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const labWithIdOnly = await prisma.lab.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LabFindManyArgs>(args?: Prisma.SelectSubset<T, LabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Lab.
   * @param {LabCreateArgs} args - Arguments to create a Lab.
   * @example
   * // Create one Lab
   * const Lab = await prisma.lab.create({
   *   data: {
   *     // ... data to create a Lab
   *   }
   * })
   * 
   */
  create<T extends LabCreateArgs>(args: Prisma.SelectSubset<T, LabCreateArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Labs.
   * @param {LabCreateManyArgs} args - Arguments to create many Labs.
   * @example
   * // Create many Labs
   * const lab = await prisma.lab.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LabCreateManyArgs>(args?: Prisma.SelectSubset<T, LabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Lab.
   * @param {LabDeleteArgs} args - Arguments to delete one Lab.
   * @example
   * // Delete one Lab
   * const Lab = await prisma.lab.delete({
   *   where: {
   *     // ... filter to delete one Lab
   *   }
   * })
   * 
   */
  delete<T extends LabDeleteArgs>(args: Prisma.SelectSubset<T, LabDeleteArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Lab.
   * @param {LabUpdateArgs} args - Arguments to update one Lab.
   * @example
   * // Update one Lab
   * const lab = await prisma.lab.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LabUpdateArgs>(args: Prisma.SelectSubset<T, LabUpdateArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Labs.
   * @param {LabDeleteManyArgs} args - Arguments to filter Labs to delete.
   * @example
   * // Delete a few Labs
   * const { count } = await prisma.lab.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LabDeleteManyArgs>(args?: Prisma.SelectSubset<T, LabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Labs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Labs
   * const lab = await prisma.lab.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LabUpdateManyArgs>(args: Prisma.SelectSubset<T, LabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Lab.
   * @param {LabUpsertArgs} args - Arguments to update or create a Lab.
   * @example
   * // Update or create a Lab
   * const lab = await prisma.lab.upsert({
   *   create: {
   *     // ... data to create a Lab
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lab we want to update
   *   }
   * })
   */
  upsert<T extends LabUpsertArgs>(args: Prisma.SelectSubset<T, LabUpsertArgs<ExtArgs>>): Prisma.Prisma__LabClient<runtime.Types.Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Labs that matches the filter.
   * @param {LabFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const lab = await prisma.lab.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.LabFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Lab.
   * @param {LabAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const lab = await prisma.lab.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.LabAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Labs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabCountArgs} args - Arguments to filter Labs to count.
   * @example
   * // Count the number of Labs
   * const count = await prisma.lab.count({
   *   where: {
   *     // ... the filter for the Labs we want to count
   *   }
   * })
  **/
  count<T extends LabCountArgs>(
    args?: Prisma.Subset<T, LabCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LabCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Lab.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LabAggregateArgs>(args: Prisma.Subset<T, LabAggregateArgs>): Prisma.PrismaPromise<GetLabAggregateType<T>>

  /**
   * Group by Lab.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LabGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LabGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LabGroupByArgs['orderBy'] }
      : { orderBy?: LabGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Lab model
 */
readonly fields: LabFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Lab.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LabClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  stories<T extends Prisma.Lab$storiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lab$storiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  members<T extends Prisma.Lab$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lab$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  invitations<T extends Prisma.Lab$invitationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lab$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Lab model
 */
export interface LabFieldRefs {
  readonly id: Prisma.FieldRef<"Lab", 'String'>
  readonly name: Prisma.FieldRef<"Lab", 'String'>
  readonly slug: Prisma.FieldRef<"Lab", 'String'>
  readonly logo: Prisma.FieldRef<"Lab", 'String'>
  readonly createdAt: Prisma.FieldRef<"Lab", 'DateTime'>
  readonly metadata: Prisma.FieldRef<"Lab", 'String'>
  readonly lngCenter: Prisma.FieldRef<"Lab", 'Float'>
  readonly latCenter: Prisma.FieldRef<"Lab", 'Float'>
  readonly initialZoom: Prisma.FieldRef<"Lab", 'Int'>
  readonly subtitle: Prisma.FieldRef<"Lab", 'String'>
  readonly content: Prisma.FieldRef<"Lab", 'String'>
  readonly visibility: Prisma.FieldRef<"Lab", 'LabVisibility'>
}
    

// Custom InputTypes
/**
 * Lab findUnique
 */
export type LabFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter, which Lab to fetch.
   */
  where: Prisma.LabWhereUniqueInput
}

/**
 * Lab findUniqueOrThrow
 */
export type LabFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter, which Lab to fetch.
   */
  where: Prisma.LabWhereUniqueInput
}

/**
 * Lab findFirst
 */
export type LabFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter, which Lab to fetch.
   */
  where?: Prisma.LabWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Labs to fetch.
   */
  orderBy?: Prisma.LabOrderByWithRelationInput | Prisma.LabOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Labs.
   */
  cursor?: Prisma.LabWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Labs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Labs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Labs.
   */
  distinct?: Prisma.LabScalarFieldEnum | Prisma.LabScalarFieldEnum[]
}

/**
 * Lab findFirstOrThrow
 */
export type LabFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter, which Lab to fetch.
   */
  where?: Prisma.LabWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Labs to fetch.
   */
  orderBy?: Prisma.LabOrderByWithRelationInput | Prisma.LabOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Labs.
   */
  cursor?: Prisma.LabWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Labs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Labs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Labs.
   */
  distinct?: Prisma.LabScalarFieldEnum | Prisma.LabScalarFieldEnum[]
}

/**
 * Lab findMany
 */
export type LabFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter, which Labs to fetch.
   */
  where?: Prisma.LabWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Labs to fetch.
   */
  orderBy?: Prisma.LabOrderByWithRelationInput | Prisma.LabOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Labs.
   */
  cursor?: Prisma.LabWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Labs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Labs.
   */
  skip?: number
  distinct?: Prisma.LabScalarFieldEnum | Prisma.LabScalarFieldEnum[]
}

/**
 * Lab create
 */
export type LabCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * The data needed to create a Lab.
   */
  data: Prisma.XOR<Prisma.LabCreateInput, Prisma.LabUncheckedCreateInput>
}

/**
 * Lab createMany
 */
export type LabCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Labs.
   */
  data: Prisma.LabCreateManyInput | Prisma.LabCreateManyInput[]
}

/**
 * Lab update
 */
export type LabUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * The data needed to update a Lab.
   */
  data: Prisma.XOR<Prisma.LabUpdateInput, Prisma.LabUncheckedUpdateInput>
  /**
   * Choose, which Lab to update.
   */
  where: Prisma.LabWhereUniqueInput
}

/**
 * Lab updateMany
 */
export type LabUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Labs.
   */
  data: Prisma.XOR<Prisma.LabUpdateManyMutationInput, Prisma.LabUncheckedUpdateManyInput>
  /**
   * Filter which Labs to update
   */
  where?: Prisma.LabWhereInput
  /**
   * Limit how many Labs to update.
   */
  limit?: number
}

/**
 * Lab upsert
 */
export type LabUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * The filter to search for the Lab to update in case it exists.
   */
  where: Prisma.LabWhereUniqueInput
  /**
   * In case the Lab found by the `where` argument doesn't exist, create a new Lab with this data.
   */
  create: Prisma.XOR<Prisma.LabCreateInput, Prisma.LabUncheckedCreateInput>
  /**
   * In case the Lab was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LabUpdateInput, Prisma.LabUncheckedUpdateInput>
}

/**
 * Lab delete
 */
export type LabDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
  /**
   * Filter which Lab to delete.
   */
  where: Prisma.LabWhereUniqueInput
}

/**
 * Lab deleteMany
 */
export type LabDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Labs to delete
   */
  where?: Prisma.LabWhereInput
  /**
   * Limit how many Labs to delete.
   */
  limit?: number
}

/**
 * Lab findRaw
 */
export type LabFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Lab aggregateRaw
 */
export type LabAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Lab.stories
 */
export type Lab$storiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Story
   */
  select?: Prisma.StorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Story
   */
  omit?: Prisma.StoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoryInclude<ExtArgs> | null
  where?: Prisma.StoryWhereInput
  orderBy?: Prisma.StoryOrderByWithRelationInput | Prisma.StoryOrderByWithRelationInput[]
  cursor?: Prisma.StoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StoryScalarFieldEnum | Prisma.StoryScalarFieldEnum[]
}

/**
 * Lab.members
 */
export type Lab$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Member
   */
  select?: Prisma.MemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Member
   */
  omit?: Prisma.MemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemberInclude<ExtArgs> | null
  where?: Prisma.MemberWhereInput
  orderBy?: Prisma.MemberOrderByWithRelationInput | Prisma.MemberOrderByWithRelationInput[]
  cursor?: Prisma.MemberWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MemberScalarFieldEnum | Prisma.MemberScalarFieldEnum[]
}

/**
 * Lab.invitations
 */
export type Lab$invitationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invitation
   */
  select?: Prisma.InvitationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invitation
   */
  omit?: Prisma.InvitationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvitationInclude<ExtArgs> | null
  where?: Prisma.InvitationWhereInput
  orderBy?: Prisma.InvitationOrderByWithRelationInput | Prisma.InvitationOrderByWithRelationInput[]
  cursor?: Prisma.InvitationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InvitationScalarFieldEnum | Prisma.InvitationScalarFieldEnum[]
}

/**
 * Lab without action
 */
export type LabDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lab
   */
  select?: Prisma.LabSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lab
   */
  omit?: Prisma.LabOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LabInclude<ExtArgs> | null
}
