
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TagsOnStories` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TagsOnStories
 * 
 */
export type TagsOnStoriesModel = runtime.Types.Result.DefaultSelection<Prisma.$TagsOnStoriesPayload>

export type AggregateTagsOnStories = {
  _count: TagsOnStoriesCountAggregateOutputType | null
  _min: TagsOnStoriesMinAggregateOutputType | null
  _max: TagsOnStoriesMaxAggregateOutputType | null
}

export type TagsOnStoriesMinAggregateOutputType = {
  storyId: string | null
  tagId: string | null
}

export type TagsOnStoriesMaxAggregateOutputType = {
  storyId: string | null
  tagId: string | null
}

export type TagsOnStoriesCountAggregateOutputType = {
  storyId: number
  tagId: number
  _all: number
}


export type TagsOnStoriesMinAggregateInputType = {
  storyId?: true
  tagId?: true
}

export type TagsOnStoriesMaxAggregateInputType = {
  storyId?: true
  tagId?: true
}

export type TagsOnStoriesCountAggregateInputType = {
  storyId?: true
  tagId?: true
  _all?: true
}

export type TagsOnStoriesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TagsOnStories to aggregate.
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnStories to fetch.
   */
  orderBy?: Prisma.TagsOnStoriesOrderByWithRelationInput | Prisma.TagsOnStoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TagsOnStoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnStories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnStories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TagsOnStories
  **/
  _count?: true | TagsOnStoriesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TagsOnStoriesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TagsOnStoriesMaxAggregateInputType
}

export type GetTagsOnStoriesAggregateType<T extends TagsOnStoriesAggregateArgs> = {
      [P in keyof T & keyof AggregateTagsOnStories]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTagsOnStories[P]>
    : Prisma.GetScalarType<T[P], AggregateTagsOnStories[P]>
}




export type TagsOnStoriesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TagsOnStoriesWhereInput
  orderBy?: Prisma.TagsOnStoriesOrderByWithAggregationInput | Prisma.TagsOnStoriesOrderByWithAggregationInput[]
  by: Prisma.TagsOnStoriesScalarFieldEnum[] | Prisma.TagsOnStoriesScalarFieldEnum
  having?: Prisma.TagsOnStoriesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TagsOnStoriesCountAggregateInputType | true
  _min?: TagsOnStoriesMinAggregateInputType
  _max?: TagsOnStoriesMaxAggregateInputType
}

export type TagsOnStoriesGroupByOutputType = {
  storyId: string
  tagId: string
  _count: TagsOnStoriesCountAggregateOutputType | null
  _min: TagsOnStoriesMinAggregateOutputType | null
  _max: TagsOnStoriesMaxAggregateOutputType | null
}

type GetTagsOnStoriesGroupByPayload<T extends TagsOnStoriesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TagsOnStoriesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TagsOnStoriesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TagsOnStoriesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TagsOnStoriesGroupByOutputType[P]>
      }
    >
  >



export type TagsOnStoriesWhereInput = {
  AND?: Prisma.TagsOnStoriesWhereInput | Prisma.TagsOnStoriesWhereInput[]
  OR?: Prisma.TagsOnStoriesWhereInput[]
  NOT?: Prisma.TagsOnStoriesWhereInput | Prisma.TagsOnStoriesWhereInput[]
  storyId?: Prisma.StringFilter<"TagsOnStories"> | string
  tagId?: Prisma.StringFilter<"TagsOnStories"> | string
  story?: Prisma.XOR<Prisma.StoryScalarRelationFilter, Prisma.StoryWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type TagsOnStoriesOrderByWithRelationInput = {
  storyId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  story?: Prisma.StoryOrderByWithRelationInput
  tag?: Prisma.TagOrderByWithRelationInput
}

export type TagsOnStoriesWhereUniqueInput = Prisma.AtLeast<{
  storyId_tagId?: Prisma.TagsOnStoriesStoryIdTagIdCompoundUniqueInput
  AND?: Prisma.TagsOnStoriesWhereInput | Prisma.TagsOnStoriesWhereInput[]
  OR?: Prisma.TagsOnStoriesWhereInput[]
  NOT?: Prisma.TagsOnStoriesWhereInput | Prisma.TagsOnStoriesWhereInput[]
  storyId?: Prisma.StringFilter<"TagsOnStories"> | string
  tagId?: Prisma.StringFilter<"TagsOnStories"> | string
  story?: Prisma.XOR<Prisma.StoryScalarRelationFilter, Prisma.StoryWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}, "storyId_tagId">

export type TagsOnStoriesOrderByWithAggregationInput = {
  storyId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  _count?: Prisma.TagsOnStoriesCountOrderByAggregateInput
  _max?: Prisma.TagsOnStoriesMaxOrderByAggregateInput
  _min?: Prisma.TagsOnStoriesMinOrderByAggregateInput
}

export type TagsOnStoriesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TagsOnStoriesScalarWhereWithAggregatesInput | Prisma.TagsOnStoriesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TagsOnStoriesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TagsOnStoriesScalarWhereWithAggregatesInput | Prisma.TagsOnStoriesScalarWhereWithAggregatesInput[]
  storyId?: Prisma.StringWithAggregatesFilter<"TagsOnStories"> | string
  tagId?: Prisma.StringWithAggregatesFilter<"TagsOnStories"> | string
}

export type TagsOnStoriesCreateInput = {
  story: Prisma.StoryCreateNestedOneWithoutTagsInput
  tag: Prisma.TagCreateNestedOneWithoutStoriesInput
}

export type TagsOnStoriesUncheckedCreateInput = {
  storyId: string
  tagId: string
}

export type TagsOnStoriesUpdateInput = {
  story?: Prisma.StoryUpdateOneRequiredWithoutTagsNestedInput
  tag?: Prisma.TagUpdateOneRequiredWithoutStoriesNestedInput
}

export type TagsOnStoriesUncheckedUpdateInput = {
  storyId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagsOnStoriesCreateManyInput = {
  storyId: string
  tagId: string
}

export type TagsOnStoriesUpdateManyMutationInput = {

}

export type TagsOnStoriesUncheckedUpdateManyInput = {
  storyId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagsOnStoriesStoryIdTagIdCompoundUniqueInput = {
  storyId: string
  tagId: string
}

export type TagsOnStoriesCountOrderByAggregateInput = {
  storyId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TagsOnStoriesMaxOrderByAggregateInput = {
  storyId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TagsOnStoriesMinOrderByAggregateInput = {
  storyId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TagsOnStoriesListRelationFilter = {
  every?: Prisma.TagsOnStoriesWhereInput
  some?: Prisma.TagsOnStoriesWhereInput
  none?: Prisma.TagsOnStoriesWhereInput
}

export type TagsOnStoriesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TagsOnStoriesCreateNestedManyWithoutStoryInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput> | Prisma.TagsOnStoriesCreateWithoutStoryInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput | Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyStoryInputEnvelope
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
}

export type TagsOnStoriesUncheckedCreateNestedManyWithoutStoryInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput> | Prisma.TagsOnStoriesCreateWithoutStoryInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput | Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyStoryInputEnvelope
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
}

export type TagsOnStoriesUpdateManyWithoutStoryNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput> | Prisma.TagsOnStoriesCreateWithoutStoryInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput | Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput[]
  upsert?: Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutStoryInput | Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutStoryInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyStoryInputEnvelope
  set?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  disconnect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  delete?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  update?: Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutStoryInput | Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutStoryInput[]
  updateMany?: Prisma.TagsOnStoriesUpdateManyWithWhereWithoutStoryInput | Prisma.TagsOnStoriesUpdateManyWithWhereWithoutStoryInput[]
  deleteMany?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
}

export type TagsOnStoriesUncheckedUpdateManyWithoutStoryNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput> | Prisma.TagsOnStoriesCreateWithoutStoryInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput | Prisma.TagsOnStoriesCreateOrConnectWithoutStoryInput[]
  upsert?: Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutStoryInput | Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutStoryInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyStoryInputEnvelope
  set?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  disconnect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  delete?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  update?: Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutStoryInput | Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutStoryInput[]
  updateMany?: Prisma.TagsOnStoriesUpdateManyWithWhereWithoutStoryInput | Prisma.TagsOnStoriesUpdateManyWithWhereWithoutStoryInput[]
  deleteMany?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
}

export type TagsOnStoriesCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput> | Prisma.TagsOnStoriesCreateWithoutTagInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput | Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyTagInputEnvelope
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
}

export type TagsOnStoriesUncheckedCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput> | Prisma.TagsOnStoriesCreateWithoutTagInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput | Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyTagInputEnvelope
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
}

export type TagsOnStoriesUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput> | Prisma.TagsOnStoriesCreateWithoutTagInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput | Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutTagInput | Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyTagInputEnvelope
  set?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  disconnect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  delete?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  update?: Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutTagInput | Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TagsOnStoriesUpdateManyWithWhereWithoutTagInput | Prisma.TagsOnStoriesUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
}

export type TagsOnStoriesUncheckedUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput> | Prisma.TagsOnStoriesCreateWithoutTagInput[] | Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput | Prisma.TagsOnStoriesCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutTagInput | Prisma.TagsOnStoriesUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagsOnStoriesCreateManyTagInputEnvelope
  set?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  disconnect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  delete?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  connect?: Prisma.TagsOnStoriesWhereUniqueInput | Prisma.TagsOnStoriesWhereUniqueInput[]
  update?: Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutTagInput | Prisma.TagsOnStoriesUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TagsOnStoriesUpdateManyWithWhereWithoutTagInput | Prisma.TagsOnStoriesUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
}

export type TagsOnStoriesCreateWithoutStoryInput = {
  tag: Prisma.TagCreateNestedOneWithoutStoriesInput
}

export type TagsOnStoriesUncheckedCreateWithoutStoryInput = {
  tagId: string
}

export type TagsOnStoriesCreateOrConnectWithoutStoryInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput>
}

export type TagsOnStoriesCreateManyStoryInputEnvelope = {
  data: Prisma.TagsOnStoriesCreateManyStoryInput | Prisma.TagsOnStoriesCreateManyStoryInput[]
  skipDuplicates?: boolean
}

export type TagsOnStoriesUpsertWithWhereUniqueWithoutStoryInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  update: Prisma.XOR<Prisma.TagsOnStoriesUpdateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedUpdateWithoutStoryInput>
  create: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedCreateWithoutStoryInput>
}

export type TagsOnStoriesUpdateWithWhereUniqueWithoutStoryInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateWithoutStoryInput, Prisma.TagsOnStoriesUncheckedUpdateWithoutStoryInput>
}

export type TagsOnStoriesUpdateManyWithWhereWithoutStoryInput = {
  where: Prisma.TagsOnStoriesScalarWhereInput
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateManyMutationInput, Prisma.TagsOnStoriesUncheckedUpdateManyWithoutStoryInput>
}

export type TagsOnStoriesScalarWhereInput = {
  AND?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
  OR?: Prisma.TagsOnStoriesScalarWhereInput[]
  NOT?: Prisma.TagsOnStoriesScalarWhereInput | Prisma.TagsOnStoriesScalarWhereInput[]
  storyId?: Prisma.StringFilter<"TagsOnStories"> | string
  tagId?: Prisma.StringFilter<"TagsOnStories"> | string
}

export type TagsOnStoriesCreateWithoutTagInput = {
  story: Prisma.StoryCreateNestedOneWithoutTagsInput
}

export type TagsOnStoriesUncheckedCreateWithoutTagInput = {
  storyId: string
}

export type TagsOnStoriesCreateOrConnectWithoutTagInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput>
}

export type TagsOnStoriesCreateManyTagInputEnvelope = {
  data: Prisma.TagsOnStoriesCreateManyTagInput | Prisma.TagsOnStoriesCreateManyTagInput[]
  skipDuplicates?: boolean
}

export type TagsOnStoriesUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  update: Prisma.XOR<Prisma.TagsOnStoriesUpdateWithoutTagInput, Prisma.TagsOnStoriesUncheckedUpdateWithoutTagInput>
  create: Prisma.XOR<Prisma.TagsOnStoriesCreateWithoutTagInput, Prisma.TagsOnStoriesUncheckedCreateWithoutTagInput>
}

export type TagsOnStoriesUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagsOnStoriesWhereUniqueInput
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateWithoutTagInput, Prisma.TagsOnStoriesUncheckedUpdateWithoutTagInput>
}

export type TagsOnStoriesUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.TagsOnStoriesScalarWhereInput
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateManyMutationInput, Prisma.TagsOnStoriesUncheckedUpdateManyWithoutTagInput>
}

export type TagsOnStoriesCreateManyStoryInput = {
  tagId: string
}

export type TagsOnStoriesUpdateWithoutStoryInput = {
  tag?: Prisma.TagUpdateOneRequiredWithoutStoriesNestedInput
}

export type TagsOnStoriesUncheckedUpdateWithoutStoryInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagsOnStoriesUncheckedUpdateManyWithoutStoryInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagsOnStoriesCreateManyTagInput = {
  storyId: string
}

export type TagsOnStoriesUpdateWithoutTagInput = {
  story?: Prisma.StoryUpdateOneRequiredWithoutTagsNestedInput
}

export type TagsOnStoriesUncheckedUpdateWithoutTagInput = {
  storyId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagsOnStoriesUncheckedUpdateManyWithoutTagInput = {
  storyId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TagsOnStoriesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  storyId?: boolean
  tagId?: boolean
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tagsOnStories"]>

export type TagsOnStoriesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  storyId?: boolean
  tagId?: boolean
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tagsOnStories"]>

export type TagsOnStoriesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  storyId?: boolean
  tagId?: boolean
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tagsOnStories"]>

export type TagsOnStoriesSelectScalar = {
  storyId?: boolean
  tagId?: boolean
}

export type TagsOnStoriesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"storyId" | "tagId", ExtArgs["result"]["tagsOnStories"]>
export type TagsOnStoriesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TagsOnStoriesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TagsOnStoriesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  story?: boolean | Prisma.StoryDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $TagsOnStoriesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TagsOnStories"
  objects: {
    story: Prisma.$StoryPayload<ExtArgs>
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    storyId: string
    tagId: string
  }, ExtArgs["result"]["tagsOnStories"]>
  composites: {}
}

export type TagsOnStoriesGetPayload<S extends boolean | null | undefined | TagsOnStoriesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload, S>

export type TagsOnStoriesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TagsOnStoriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TagsOnStoriesCountAggregateInputType | true
  }

export interface TagsOnStoriesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagsOnStories'], meta: { name: 'TagsOnStories' } }
  /**
   * Find zero or one TagsOnStories that matches the filter.
   * @param {TagsOnStoriesFindUniqueArgs} args - Arguments to find a TagsOnStories
   * @example
   * // Get one TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TagsOnStoriesFindUniqueArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TagsOnStories that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TagsOnStoriesFindUniqueOrThrowArgs} args - Arguments to find a TagsOnStories
   * @example
   * // Get one TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TagsOnStoriesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TagsOnStories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesFindFirstArgs} args - Arguments to find a TagsOnStories
   * @example
   * // Get one TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TagsOnStoriesFindFirstArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TagsOnStories that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesFindFirstOrThrowArgs} args - Arguments to find a TagsOnStories
   * @example
   * // Get one TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TagsOnStoriesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TagsOnStories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findMany()
   * 
   * // Get first 10 TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.findMany({ take: 10 })
   * 
   * // Only select the `storyId`
   * const tagsOnStoriesWithStoryIdOnly = await prisma.tagsOnStories.findMany({ select: { storyId: true } })
   * 
   */
  findMany<T extends TagsOnStoriesFindManyArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TagsOnStories.
   * @param {TagsOnStoriesCreateArgs} args - Arguments to create a TagsOnStories.
   * @example
   * // Create one TagsOnStories
   * const TagsOnStories = await prisma.tagsOnStories.create({
   *   data: {
   *     // ... data to create a TagsOnStories
   *   }
   * })
   * 
   */
  create<T extends TagsOnStoriesCreateArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesCreateArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TagsOnStories.
   * @param {TagsOnStoriesCreateManyArgs} args - Arguments to create many TagsOnStories.
   * @example
   * // Create many TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TagsOnStoriesCreateManyArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TagsOnStories and returns the data saved in the database.
   * @param {TagsOnStoriesCreateManyAndReturnArgs} args - Arguments to create many TagsOnStories.
   * @example
   * // Create many TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TagsOnStories and only return the `storyId`
   * const tagsOnStoriesWithStoryIdOnly = await prisma.tagsOnStories.createManyAndReturn({
   *   select: { storyId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TagsOnStoriesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TagsOnStories.
   * @param {TagsOnStoriesDeleteArgs} args - Arguments to delete one TagsOnStories.
   * @example
   * // Delete one TagsOnStories
   * const TagsOnStories = await prisma.tagsOnStories.delete({
   *   where: {
   *     // ... filter to delete one TagsOnStories
   *   }
   * })
   * 
   */
  delete<T extends TagsOnStoriesDeleteArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesDeleteArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TagsOnStories.
   * @param {TagsOnStoriesUpdateArgs} args - Arguments to update one TagsOnStories.
   * @example
   * // Update one TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TagsOnStoriesUpdateArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesUpdateArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TagsOnStories.
   * @param {TagsOnStoriesDeleteManyArgs} args - Arguments to filter TagsOnStories to delete.
   * @example
   * // Delete a few TagsOnStories
   * const { count } = await prisma.tagsOnStories.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TagsOnStoriesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TagsOnStoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TagsOnStories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TagsOnStoriesUpdateManyArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TagsOnStories and returns the data updated in the database.
   * @param {TagsOnStoriesUpdateManyAndReturnArgs} args - Arguments to update many TagsOnStories.
   * @example
   * // Update many TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TagsOnStories and only return the `storyId`
   * const tagsOnStoriesWithStoryIdOnly = await prisma.tagsOnStories.updateManyAndReturn({
   *   select: { storyId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TagsOnStoriesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TagsOnStories.
   * @param {TagsOnStoriesUpsertArgs} args - Arguments to update or create a TagsOnStories.
   * @example
   * // Update or create a TagsOnStories
   * const tagsOnStories = await prisma.tagsOnStories.upsert({
   *   create: {
   *     // ... data to create a TagsOnStories
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TagsOnStories we want to update
   *   }
   * })
   */
  upsert<T extends TagsOnStoriesUpsertArgs>(args: Prisma.SelectSubset<T, TagsOnStoriesUpsertArgs<ExtArgs>>): Prisma.Prisma__TagsOnStoriesClient<runtime.Types.Result.GetResult<Prisma.$TagsOnStoriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TagsOnStories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesCountArgs} args - Arguments to filter TagsOnStories to count.
   * @example
   * // Count the number of TagsOnStories
   * const count = await prisma.tagsOnStories.count({
   *   where: {
   *     // ... the filter for the TagsOnStories we want to count
   *   }
   * })
  **/
  count<T extends TagsOnStoriesCountArgs>(
    args?: Prisma.Subset<T, TagsOnStoriesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TagsOnStoriesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TagsOnStories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TagsOnStoriesAggregateArgs>(args: Prisma.Subset<T, TagsOnStoriesAggregateArgs>): Prisma.PrismaPromise<GetTagsOnStoriesAggregateType<T>>

  /**
   * Group by TagsOnStories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsOnStoriesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TagsOnStoriesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TagsOnStoriesGroupByArgs['orderBy'] }
      : { orderBy?: TagsOnStoriesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TagsOnStoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsOnStoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TagsOnStories model
 */
readonly fields: TagsOnStoriesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TagsOnStories.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TagsOnStoriesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  story<T extends Prisma.StoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoryDefaultArgs<ExtArgs>>): Prisma.Prisma__StoryClient<runtime.Types.Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>): Prisma.Prisma__TagClient<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TagsOnStories model
 */
export interface TagsOnStoriesFieldRefs {
  readonly storyId: Prisma.FieldRef<"TagsOnStories", 'String'>
  readonly tagId: Prisma.FieldRef<"TagsOnStories", 'String'>
}
    

// Custom InputTypes
/**
 * TagsOnStories findUnique
 */
export type TagsOnStoriesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnStories to fetch.
   */
  where: Prisma.TagsOnStoriesWhereUniqueInput
}

/**
 * TagsOnStories findUniqueOrThrow
 */
export type TagsOnStoriesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnStories to fetch.
   */
  where: Prisma.TagsOnStoriesWhereUniqueInput
}

/**
 * TagsOnStories findFirst
 */
export type TagsOnStoriesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnStories to fetch.
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnStories to fetch.
   */
  orderBy?: Prisma.TagsOnStoriesOrderByWithRelationInput | Prisma.TagsOnStoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TagsOnStories.
   */
  cursor?: Prisma.TagsOnStoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnStories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnStories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TagsOnStories.
   */
  distinct?: Prisma.TagsOnStoriesScalarFieldEnum | Prisma.TagsOnStoriesScalarFieldEnum[]
}

/**
 * TagsOnStories findFirstOrThrow
 */
export type TagsOnStoriesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnStories to fetch.
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnStories to fetch.
   */
  orderBy?: Prisma.TagsOnStoriesOrderByWithRelationInput | Prisma.TagsOnStoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TagsOnStories.
   */
  cursor?: Prisma.TagsOnStoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnStories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnStories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TagsOnStories.
   */
  distinct?: Prisma.TagsOnStoriesScalarFieldEnum | Prisma.TagsOnStoriesScalarFieldEnum[]
}

/**
 * TagsOnStories findMany
 */
export type TagsOnStoriesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter, which TagsOnStories to fetch.
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TagsOnStories to fetch.
   */
  orderBy?: Prisma.TagsOnStoriesOrderByWithRelationInput | Prisma.TagsOnStoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TagsOnStories.
   */
  cursor?: Prisma.TagsOnStoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TagsOnStories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TagsOnStories.
   */
  skip?: number
  distinct?: Prisma.TagsOnStoriesScalarFieldEnum | Prisma.TagsOnStoriesScalarFieldEnum[]
}

/**
 * TagsOnStories create
 */
export type TagsOnStoriesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * The data needed to create a TagsOnStories.
   */
  data: Prisma.XOR<Prisma.TagsOnStoriesCreateInput, Prisma.TagsOnStoriesUncheckedCreateInput>
}

/**
 * TagsOnStories createMany
 */
export type TagsOnStoriesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TagsOnStories.
   */
  data: Prisma.TagsOnStoriesCreateManyInput | Prisma.TagsOnStoriesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TagsOnStories createManyAndReturn
 */
export type TagsOnStoriesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * The data used to create many TagsOnStories.
   */
  data: Prisma.TagsOnStoriesCreateManyInput | Prisma.TagsOnStoriesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TagsOnStories update
 */
export type TagsOnStoriesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * The data needed to update a TagsOnStories.
   */
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateInput, Prisma.TagsOnStoriesUncheckedUpdateInput>
  /**
   * Choose, which TagsOnStories to update.
   */
  where: Prisma.TagsOnStoriesWhereUniqueInput
}

/**
 * TagsOnStories updateMany
 */
export type TagsOnStoriesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TagsOnStories.
   */
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateManyMutationInput, Prisma.TagsOnStoriesUncheckedUpdateManyInput>
  /**
   * Filter which TagsOnStories to update
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * Limit how many TagsOnStories to update.
   */
  limit?: number
}

/**
 * TagsOnStories updateManyAndReturn
 */
export type TagsOnStoriesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * The data used to update TagsOnStories.
   */
  data: Prisma.XOR<Prisma.TagsOnStoriesUpdateManyMutationInput, Prisma.TagsOnStoriesUncheckedUpdateManyInput>
  /**
   * Filter which TagsOnStories to update
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * Limit how many TagsOnStories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TagsOnStories upsert
 */
export type TagsOnStoriesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * The filter to search for the TagsOnStories to update in case it exists.
   */
  where: Prisma.TagsOnStoriesWhereUniqueInput
  /**
   * In case the TagsOnStories found by the `where` argument doesn't exist, create a new TagsOnStories with this data.
   */
  create: Prisma.XOR<Prisma.TagsOnStoriesCreateInput, Prisma.TagsOnStoriesUncheckedCreateInput>
  /**
   * In case the TagsOnStories was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TagsOnStoriesUpdateInput, Prisma.TagsOnStoriesUncheckedUpdateInput>
}

/**
 * TagsOnStories delete
 */
export type TagsOnStoriesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
  /**
   * Filter which TagsOnStories to delete.
   */
  where: Prisma.TagsOnStoriesWhereUniqueInput
}

/**
 * TagsOnStories deleteMany
 */
export type TagsOnStoriesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TagsOnStories to delete
   */
  where?: Prisma.TagsOnStoriesWhereInput
  /**
   * Limit how many TagsOnStories to delete.
   */
  limit?: number
}

/**
 * TagsOnStories without action
 */
export type TagsOnStoriesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TagsOnStories
   */
  select?: Prisma.TagsOnStoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagsOnStories
   */
  omit?: Prisma.TagsOnStoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsOnStoriesInclude<ExtArgs> | null
}
